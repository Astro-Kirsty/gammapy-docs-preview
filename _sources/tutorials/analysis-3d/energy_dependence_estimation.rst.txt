
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-3d/energy_dependence_estimation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-3d_energy_dependence_estimation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-3d_energy_dependence_estimation.py:


Energy dependence estimation
============================

Learn how to test for energy-dependent morphology in your dataset.

Prerequisites
-------------
Knowledge on data reduction and datasets used in Gammapy, for example see
the :doc:`/tutorials/data/hess` and :doc:`/tutorials/analysis-2d/ring_background` tutorials.


Context
-------

This tutorial introduces a method to investigate the potential of energy-dependent morphology from spatial maps.
It is possible for gamma-ray sources to exhibit energy-dependent morphology, in which the spatial morphology of
the gamma rays varies across different energy bands. This is plausible for different source types, including pulsar
wind nebulae (PWNe) and supernova remnants. HESS J1825−137 is a well-known example of a PWNe which shows a clear
energy-dependent gamma-ray morphology (see `Aharonian et al., 2006 <https://ui.adsabs.harvard.edu/abs/2019A%26A...621A.116H/abstract>`__,
`H.E.S.S. Collaboration et al., 2019 <https://ui.adsabs.harvard.edu/abs/2006A%26A...460..365A/abstract>`__ and
`Principe et al., 2020 <https://ui.adsabs.harvard.edu/abs/2020A%26A...640A..76P/abstract>`__.)

Many different techniques of measuring this energy-dependence have been utilised over the years.
The method shown here is to perform a morphological fit of extension and position in various energy slices and
compare this with a global morphology fit.


**Objective: Perform an energy-dependent morphology study of a mock source.**


Tutorial overview
-----------------

This tutorial consists of two main steps.

Firstly, the user defines the initial `~gammapy.modeling.models.SkyModel` based on previous investigations
and selects the energy bands of interest to test for energy dependence. The null hypothesis is defined as
only the background component being free (norm). The alternative hypothesis introduces the source model.
The results of this first step show the significance of the source above the background in each energy band.

The second step is to quantify any energy-dependent morphology. The null hypothesis is determined by performing
a joint fit of the parameters. In the alternative hypothesis, the free parameters of the model are fit
individually within each energy band.


Setup
-----

.. GENERATED FROM PYTHON SOURCE LINES 51-69

.. code-block:: python3


    from astropy import units as u
    from astropy.coordinates import SkyCoord
    from astropy.table import Table
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.datasets import Datasets, MapDataset
    from gammapy.estimators import EnergyDependenceEstimator
    from gammapy.estimators.energydependence import weighted_chi2_parameter
    from gammapy.maps import Map
    from gammapy.modeling.models import (
        GaussianSpatialModel,
        PowerLawSpectralModel,
        SkyModel,
    )
    from gammapy.stats.utils import ts_to_sigma
    from gammapy.utils.check import check_tutorials_setup








.. GENERATED FROM PYTHON SOURCE LINES 70-72

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: python3


    check_tutorials_setup()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/feijen/Documents/github/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev1465+gced7228bc.d20240117 
            path                   : /home/feijen/Documents/github/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.2     
            scipy                  : 1.11.4     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.2      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.24.0     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.8.0      


    Gammapy environment variables:

            GAMMAPY_DATA           : /home/feijen/gammapy-datasets/dev 





.. GENERATED FROM PYTHON SOURCE LINES 76-83

Obtain the data to use
----------------------

Utilise the pre-defined dataset within `$GAMMAPY_DATA`.

P.S.: do not forget to set up your environment variable `$GAMMAPY_DATA`
to your local directory.

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: python3


    stacked_dataset = MapDataset.read('/home/feijen/Documents/github/gammapy-data/estimators/mock_data/dataset_energy_dependent.fits.gz')
    datasets = Datasets([stacked_dataset])









.. GENERATED FROM PYTHON SOURCE LINES 89-91

Define the energy edges of interest. These will be utilised to
investigate the potential of energy-dependent morphology in the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: python3


    energy_edges = [1, 3, 5, 20] * u.TeV









.. GENERATED FROM PYTHON SOURCE LINES 96-103

Define the spectral and spatial models of interest. We utilise
a `~gammapy.modeling.models.PowerLawSpectralModel` and a
`~gammapy.modeling.models.GaussianSpatialModel` to test the energy-dependent
morphology component in each energy band. A standard 3D fit (see the
:doc:`/tutorials/analysis-3d/analysis_3d` tutorial)
is performed, then the best fit model is utilised here for the initial parameters
in each model.

.. GENERATED FROM PYTHON SOURCE LINES 103-127

.. code-block:: python3


    source_position = SkyCoord(5.58, 0.2, unit="deg", frame="galactic")

    spectral_model = PowerLawSpectralModel(
        index=2.5, amplitude=9.8e-12 * u.Unit("cm-2 s-1 TeV-1"), reference=1.0 * u.TeV
    )

    spatial_model = GaussianSpatialModel(
        lon_0=source_position.l,
        lat_0=source_position.b,
        frame="galactic",
        sigma=0.2*u.deg,
    )

    # Limit the search for the position on the spatial model
    spatial_model.lon_0.min = source_position.galactic.l.deg - 0.8
    spatial_model.lon_0.max = source_position.galactic.l.deg + 0.8
    spatial_model.lat_0.min = source_position.galactic.b.deg - 0.8
    spatial_model.lat_0.max = source_position.galactic.b.deg + 0.8

    model = SkyModel(
        spatial_model=spatial_model, spectral_model=spectral_model, name="src"
    )








.. GENERATED FROM PYTHON SOURCE LINES 128-140

Run Estimator
-------------

We can now run the energy-dependent estimation tool and explore the results.

Let's start with the initial hypothesis, in which the source is introduced
to compare with the background. We specify which parameters we
wish to use for testing the energy dependence.
To test for the energy dependence, it is recommended to keep the position and
extension parameters free. This allows them to be used for fitting the spatial model
in each energy band.


.. GENERATED FROM PYTHON SOURCE LINES 140-152

.. code-block:: python3


    model.spatial_model.lon_0.frozen = False
    model.spatial_model.lat_0.frozen = False
    model.spatial_model.sigma.frozen = False

    model.spectral_model.amplitude.frozen = False
    model.spectral_model.index.frozen = True

    datasets.models = model

    estimator = EnergyDependenceEstimator(energy_edges=energy_edges, source="src")








.. GENERATED FROM PYTHON SOURCE LINES 153-164

Show the results tables
-----------------------

The results of the source signal above the background in each energy bin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Firstly, the estimator is run to produce the results.
The table here shows the ∆(TS) value, the number of degrees of freedom (df)
and the significance (σ) in each energy bin. The significance values here show that each
energy band has significant signal above the background.


.. GENERATED FROM PYTHON SOURCE LINES 164-169

.. code-block:: python3


    results = estimator.run(datasets)
    table_bkg_src = Table(results["src_above_bkg"])
    display(table_bkg_src)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Emin Emax      delta_ts       df    significance   
    TeV  TeV                                           
    ---- ---- ------------------ --- ------------------
     1.0  3.0  967.2116031845144   4 30.782095077167053
     3.0  5.0  643.2235599165433   4 24.995569452402634
     5.0 20.0 207.23614471776455   4 13.864163934443171




.. GENERATED FROM PYTHON SOURCE LINES 170-176

The results for testing energy dependence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, the results of the energy-dependent estimator are shown.
The table shows the various free parameters for the joint fit for :math:`H_0` across the entire
energy band and for each energy bin shown for :math:`H_1`.

.. GENERATED FROM PYTHON SOURCE LINES 176-188

.. code-block:: python3


    ts = results["energy_dependence"]["delta_ts"]
    df = results["energy_dependence"]["df"]
    sigma = ts_to_sigma(ts, df=df)

    print(f"The delta_ts for the energy-dependent study: {ts:.3f}.")
    print(f"Converting this to a significance gives: {sigma:.3f} \u03C3")

    results_table = Table(results["energy_dependence"]["result"])
    display(results_table)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The delta_ts for the energy-dependent study: 41.455.
    Converting this to a significance gives: 5.169 σ
    Hypothesis Emin Emax ...        sigma             sigma_err      
               TeV  TeV  ...         deg                 deg         
    ---------- ---- ---- ... ------------------- --------------------
            H0  1.0 20.0 ...  0.2417224670949668 0.006819953731055358
            H1  1.0  3.0 ...  0.2743748685013831 0.008952133914520665
            H1  3.0  5.0 ...  0.2260691440823632 0.010367657987246578
            H1  5.0 20.0 ... 0.16190472355990307 0.012022272804519795




.. GENERATED FROM PYTHON SOURCE LINES 189-197

The chi-squared value for each parameter of interest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can also utilise the `~gammapy.estimators.energydependence.weighted_chi2_parameter`
function for each parameter.

The weighted chi-squared significance for the ``sigma``, ``lat_0`` and ``lon_0`` values.


.. GENERATED FROM PYTHON SOURCE LINES 197-206

.. code-block:: python3


    display(
        Table(
            weighted_chi2_parameter(
                results["energy_dependence"]["result"], parameters=['sigma','lat_0', 'lon_0']
            )
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    parameter        chi2         df    significance   
    --------- ------------------ --- ------------------
        sigma  56.72284798730442   2   7.23036013474655
        lat_0 1.2979191458481092   2 0.6393593147286494
        lon_0 2.2969498400888315   2 1.0003936657582273




.. GENERATED FROM PYTHON SOURCE LINES 207-210

Note: The chi-squared parameter does not include potential correlation between the
parameters, so it should be used cautiously.


.. GENERATED FROM PYTHON SOURCE LINES 213-215

Plotting the results
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 215-250

.. code-block:: python3


    empty_map = Map.create(
        skydir=spatial_model.position, frame=spatial_model.frame, width=1, binsz=0.02
    )

    colors = ["red", "blue", "green", "magenta"]

    fig = plt.figure(figsize=(6, 4))
    ax = empty_map.plot()

    lat_0 = results["energy_dependence"]["result"]["lat_0"][1:]
    lat_0_err = results["energy_dependence"]["result"]["lat_0_err"][1:]
    lon_0 = results["energy_dependence"]["result"]["lon_0"][1:]
    lon_0_err = results["energy_dependence"]["result"]["lon_0_err"][1:]
    sigma = results["energy_dependence"]["result"]["sigma"][1:]
    sigma_err = results["energy_dependence"]["result"]["sigma_err"][1:]

    for i in range(len(lat_0)):
        model_plot = GaussianSpatialModel(
            lat_0=lat_0[i], lon_0=lon_0[i], sigma=sigma[i], frame=spatial_model.frame
        )
        model_plot.lat_0.error = lat_0_err[i]
        model_plot.lon_0.error = lon_0_err[i]
        model_plot.sigma.error = sigma_err[i]

        model_plot.plot_error(
            ax=ax,
            which="all",
            kwargs_extension={"facecolor": colors[i], "edgecolor": colors[i]},
            kwargs_position={"color": colors[i]},
        )
    plt.show()


    # sphinx_gallery_thumbnail_number = 2



.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_001.png
   :alt: energy dependence estimation
   :srcset: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.325 seconds)


.. _sphx_glr_download_tutorials_analysis-3d_energy_dependence_estimation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-3d/energy_dependence_estimation.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: energy_dependence_estimation.py <energy_dependence_estimation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: energy_dependence_estimation.ipynb <energy_dependence_estimation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
