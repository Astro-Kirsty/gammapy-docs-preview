
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-3d/energy_dependence_estimation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-3d_energy_dependence_estimation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-3d_energy_dependence_estimation.py:


Energy dependence estimation
============================

Learn how to test for energy-dependent morphology in your dataset.

Prerequisites
-------------
Knowledge on data reduction and datasets used in Gammapy, for example see
the :doc:`/tutorials/data/hess` and :doc:`/tutorials/analysis-2d/ring_background` tutorials.


Context
-------

A tool to investigate the potential of energy-dependent morphology from spatial maps. This tutorial consists
of two main steps.

Firstly, the user defines the initial `~gammapy.modeling.models.SkyModel` based on previous investigations
and selects the energy bands of interest to test for energy dependence. The null hypothesis is defined as
only the background component being free (norm). The alternative hypothesis introduces the source model.
The results of this first step show the significance of the source above the background in each energy band.

The second step is to quantify any energy-dependent morphology. The null hypothesis is determined by performing
a joint fit of the parameters. In the alternative hypothesis, the free parameters of the model are fit
individually within each energy band.


Setup
-----

.. GENERATED FROM PYTHON SOURCE LINES 33-61

.. code-block:: python3


    from astropy import units as u
    from astropy.coordinates import SkyCoord
    from astropy.table import Table
    from regions import CircleSkyRegion
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.data import DataStore
    from gammapy.datasets import MapDataset
    from gammapy.estimators.energydependence import (
        EnergyDependenceEstimator,
        weighted_chi2_parameter,
    )
    from gammapy.makers import (
        DatasetsMaker,
        FoVBackgroundMaker,
        MapDatasetMaker,
        SafeMaskMaker,
    )
    from gammapy.maps import Map, MapAxis, WcsGeom
    from gammapy.modeling.models import (
        GaussianSpatialModel,
        PowerLawSpectralModel,
        SkyModel,
    )
    from gammapy.stats.utils import ts_to_sigma
    from gammapy.utils.check import check_tutorials_setup








.. GENERATED FROM PYTHON SOURCE LINES 62-64

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: python3


    check_tutorials_setup()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/feijen/Documents/github/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev620+gee7f2f30d.d20231208 
            path                   : /home/feijen/Documents/github/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.2     
            scipy                  : 1.11.4     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.2      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.24.0     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.8.0      


    Gammapy environment variables:

            GAMMAPY_DATA           : /home/feijen/gammapy-datasets/1.1rc1 





.. GENERATED FROM PYTHON SOURCE LINES 68-76

Obtain the data to use
----------------------

Create the data store and obtain the observations from the `H.E.S.S. DL3
DR1 <https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/>`__ for MSH 1552.

P.S.: do not forget to set up your environment variable `$GAMMAPY_DATA`
to your local directory.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: python3


    data_store = DataStore.from_dir("$GAMMAPY_DATA/hess-dl3-dr1")
    obs_id = data_store.obs_table["OBS_ID"][data_store.obs_table["OBJECT"] == "MSH 15-5-02"]
    observations = data_store.get_observations(obs_id)








.. GENERATED FROM PYTHON SOURCE LINES 82-87

Setting the exclusion mask
--------------------------

First, we define the energy range to obtain the dataset within. The geometry is also
defined, based on the position of MSH 1552 (the source of interest here).

.. GENERATED FROM PYTHON SOURCE LINES 87-106

.. code-block:: python3


    energy_axis = MapAxis.from_energy_bounds(0.2, 100, nbin=15, unit="TeV")
    energy_axis_true = MapAxis.from_energy_bounds(
        0.05, 110, nbin=30, unit="TeV", name="energy_true"
    )

    source_pos = SkyCoord(320.33, -1.19, unit="deg", frame="galactic")
    geom = WcsGeom.create(
        skydir=(source_pos.galactic.l.deg, source_pos.galactic.b.deg),
        frame="galactic",
        axes=[energy_axis],
        width=5,
        binsz=0.02,
    )
    regions = CircleSkyRegion(center=source_pos, radius=0.7 * u.deg)
    exclusion_mask = geom.region_mask(regions, inside=False)
    exclusion_mask.sum_over_axes().plot()
    plt.show()




.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_001.png
   :alt: energy dependence estimation
   :srcset: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-116

Data reduction loop
-------------------

For further details on how the data reduction is performed see the
:doc:`/tutorials/api/makers` tutorial.
The data reduction steps can be combined using the `~gammapy.makers.DatasetsMaker`
class which takes as an input the list of makers.
We stack the dataset in this step.


.. GENERATED FROM PYTHON SOURCE LINES 116-134

.. code-block:: python3


    safe_mask_maker = SafeMaskMaker(
        methods=["aeff-default", "offset-max"], offset_max=2.5 * u.deg
    )

    dataset_maker = MapDatasetMaker()

    fov_bkg_maker = FoVBackgroundMaker(method="fit", exclusion_mask=exclusion_mask)

    global_dataset = MapDataset.create(geom, energy_axis_true=energy_axis_true)
    makers = [dataset_maker, safe_mask_maker, fov_bkg_maker]  # the order matters

    datasets_maker = DatasetsMaker(
        makers, stack_datasets=True, n_jobs=1, cutout_mode="partial"
    )

    datasets = datasets_maker.run(global_dataset, observations)








.. GENERATED FROM PYTHON SOURCE LINES 135-137

Define the energy edges of interest. These will be utilised to
investigate the potential of energy-dependent morphology in the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: python3


    energy_edges = [0.3, 1, 5, 10] * u.TeV








.. GENERATED FROM PYTHON SOURCE LINES 141-148

Define the spectral and spatial models of interest. We utilise
a `~gammapy.modeling.models.PowerLawSpectralModel` and a
`~gammapy.modeling.models.GaussianSpatialModel` to test the energy-dependent
morphology component in each energy band. A standard 3D fit (see the
:doc:`/tutorials/analysis-3d/analysis_3d` tutorial)
is performed, then the best fit model is utilised here for the initial parameters
in each model.

.. GENERATED FROM PYTHON SOURCE LINES 148-172

.. code-block:: python3


    spectral_model = PowerLawSpectralModel(
        index=2.26, amplitude=2.58e-12 * u.Unit("cm-2 s-1 TeV-1"), reference=1.0 * u.TeV
    )

    spatial_model = GaussianSpatialModel(
        lon_0=source_pos.l,
        lat_0=source_pos.b,
        frame="galactic",
        sigma=0.11 * u.deg,
        e=0.8346,
        phi=-2.914 * u.deg,
    )

    # Limit the search for the position on the spatial model
    spatial_model.lon_0.min = source_pos.galactic.l.deg - 0.8
    spatial_model.lon_0.max = source_pos.galactic.l.deg + 0.8
    spatial_model.lat_0.min = source_pos.galactic.b.deg - 0.8
    spatial_model.lat_0.max = source_pos.galactic.b.deg + 0.8

    model = SkyModel(
        spatial_model=spatial_model, spectral_model=spectral_model, name="MSH1552"
    )








.. GENERATED FROM PYTHON SOURCE LINES 173-185

Run Estimator
-------------

We can now run the energy-dependent estimation tool and explore the results.

Let's start with the initial hypothesis, in which the source is introduced
to compare with the background. We specify which parameters we
wish to use for testing the energy dependence.
To test for the energy dependence, it is recommended to keep the position and
extension parameters free. This allows them to be used for fitting the spatial model
in each energy band.


.. GENERATED FROM PYTHON SOURCE LINES 185-197

.. code-block:: python3


    model.spatial_model.lon_0.frozen = False
    model.spatial_model.lat_0.frozen = False
    model.spatial_model.sigma.frozen = False

    model.spectral_model.amplitude.frozen = False
    model.spectral_model.index.frozen = True

    datasets.models = model

    estimator = EnergyDependenceEstimator(energy_edges=energy_edges, source="MSH1552")








.. GENERATED FROM PYTHON SOURCE LINES 198-209

Show the results tables
-----------------------

The results of the source signal above the background in each energy bin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Firstly, the estimator is run to produce the results.
The table here shows the ∆(TS) value, the number of degrees of freedom (df)
and the significance (σ) in each energy bin. The significance values here show that each
energy band has significant signal above the background.


.. GENERATED FROM PYTHON SOURCE LINES 209-214

.. code-block:: python3


    results = estimator.run(datasets)
    table_bkg_src = Table(results['src_above_bkg'])
    display(table_bkg_src)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Emin Emax      delta_ts      df    significance   
    TeV  TeV                                          
    ---- ---- ----------------- --- ------------------
     0.3  1.0 197.4253334927198   4 13.511155550178293
     1.0  5.0 390.8315268113802   4 19.336240605753236
     5.0 10.0 48.51171124536086   4  6.157675013419319




.. GENERATED FROM PYTHON SOURCE LINES 215-221

The results for testing energy dependence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, the results of the energy-dependent estimator are shown.
The table shows the various free parameters for the joint fit for :math:`H_0` across the entire
energy band and for each energy bin shown for :math:`H_1`.

.. GENERATED FROM PYTHON SOURCE LINES 221-233

.. code-block:: python3


    ts = results["energy_dependence"]["delta_ts"]
    df = results["energy_dependence"]["df"]
    sigma = ts_to_sigma(ts, df=df)

    print(f"The delta_ts for the energy-dependent study: {ts:.3f}.")
    print(f"Converting this to a significance gives: {sigma:.3f} \u03C3")

    results_table = Table(results["energy_dependence"]["result"])
    display(results_table)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The delta_ts for the energy-dependent study: 9.457.
    Converting this to a significance gives: 1.441 σ
    Hypothesis Emin Emax ...      lat_0_err              sigma             sigma_err      
               TeV  TeV  ...         deg                  deg                 deg         
    ---------- ---- ---- ... -------------------- ------------------- --------------------
            H0  0.3 10.0 ... 0.008274529303196198 0.10612094687505554 0.006660948358698256
            H1  0.3  1.0 ... 0.014780087336269579 0.10624122194458055 0.010718199256091361
            H1  1.0  5.0 ...  0.01063352919919062 0.10834898880064339  0.00903016611224744
            H1  5.0 10.0 ... 0.018742272006375536 0.04303723044874728  0.02385262918122698




.. GENERATED FROM PYTHON SOURCE LINES 234-241

The chi-squared value for each parameter of interest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can also utilise the `~gammapy.estimators.energydependence.weighted_chi2_parameter` function for each parameter.

The weighted chi-squared significance for the ``sigma`` values.


.. GENERATED FROM PYTHON SOURCE LINES 241-250

.. code-block:: python3


    display(
        Table(
            weighted_chi2_parameter(
                results["energy_dependence"]["result"], parameter="sigma"
            )
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        chi2 sigma     df    significance   
    ----------------- --- ------------------
    6.756038305845461   2 2.1187102168476195




.. GENERATED FROM PYTHON SOURCE LINES 251-252

The weighted chi-squared significance for the ``lat_0`` values.

.. GENERATED FROM PYTHON SOURCE LINES 252-261

.. code-block:: python3


    display(
        Table(
            weighted_chi2_parameter(
                results["energy_dependence"]["result"], parameter="lat_0"
            )
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        chi2 lat_0     df    significance   
    ----------------- --- ------------------
    7.784222098374432   2 2.3188673412635374




.. GENERATED FROM PYTHON SOURCE LINES 262-263

The weighted chi-squared significance for the ``lon_0`` values.

.. GENERATED FROM PYTHON SOURCE LINES 263-273

.. code-block:: python3


    display(
        Table(
            weighted_chi2_parameter(
                results["energy_dependence"]["result"], parameter="lon_0"
            )
        )
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        chi2 lon_0      df    significance  
    ------------------ --- -----------------
    1.0360658950047972   2 0.530606988241248




.. GENERATED FROM PYTHON SOURCE LINES 274-276

Plotting the results
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 276-311

.. code-block:: python3


    empty_map = Map.create(
        skydir=spatial_model.position, frame=spatial_model.frame, width=0.7, binsz=0.02
    )

    colors = ["red", "blue", "green", "magenta"]

    fig = plt.figure(figsize=(6, 4))
    ax = empty_map.plot()

    lat_0 = results["energy_dependence"]["result"]["lat_0"][1:]
    lat_0_err = results["energy_dependence"]["result"]["lat_0_err"][1:]
    lon_0 = results["energy_dependence"]["result"]["lon_0"][1:]
    lon_0_err = results["energy_dependence"]["result"]["lon_0_err"][1:]
    sigma = results["energy_dependence"]["result"]["sigma"][1:]
    sigma_err = results["energy_dependence"]["result"]["sigma_err"][1:]

    for i in range(len(lat_0)):
        model_plot = GaussianSpatialModel(
            lat_0=lat_0[i], lon_0=lon_0[i], sigma=sigma[i], frame=spatial_model.frame
        )
        model_plot.lat_0.error = lat_0_err[i]
        model_plot.lon_0.error = lon_0_err[i]
        model_plot.sigma.error = sigma_err[i]

        model_plot.plot_error(
            ax=ax,
            which="all",
            kwargs_extension={"facecolor": colors[i], "edgecolor": colors[i]},
            kwargs_position={"color": colors[i]},
        )
    plt.show()


    # sphinx_gallery_thumbnail_number = 2



.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_002.png
   :alt: energy dependence estimation
   :srcset: /tutorials/analysis-3d/images/sphx_glr_energy_dependence_estimation_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.048 seconds)


.. _sphx_glr_download_tutorials_analysis-3d_energy_dependence_estimation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-3d/energy_dependence_estimation.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: energy_dependence_estimation.py <energy_dependence_estimation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: energy_dependence_estimation.ipynb <energy_dependence_estimation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
